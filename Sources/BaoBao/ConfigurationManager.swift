import Foundation
import os.log

/// ÈÖçÁΩÆÁÆ°ÁêÜÂô®ÔºåË¥üË¥£Âä†ËΩΩ„ÄÅÁÆ°ÁêÜÂíåÊèê‰æõÂ∫îÁî®ÈÖçÁΩÆ
class ConfigurationManager {
    /// ÂÖ±‰∫´ÂÆû‰æã
    static let shared = ConfigurationManager()
    
    /// Êó•ÂøóËÆ∞ÂΩïÂô®
    private let logger = Logger(subsystem: "com.example.baobao", category: "ConfigurationManager")
    
    /// ÈÖçÁΩÆÊñá‰ª∂URL
    private let configURL: URL
    
    /// ÈÖçÁΩÆÊï∞ÊçÆ
    private var config: [String: Any]
    
    /// ÂàùÂßãÂåñ
    private init() {
        // Ëé∑ÂèñÊñáÊ°£ÁõÆÂΩï
        let documentsDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)[0]
        configURL = documentsDirectory.appendingPathComponent("Config.plist")
        
        // Â∞ùËØïÂä†ËΩΩÈÖçÁΩÆÊñá‰ª∂
        if FileManager.default.fileExists(atPath: configURL.path) {
            if let plistData = try? Data(contentsOf: configURL),
               let plist = try? PropertyListSerialization.propertyList(from: plistData, options: [], format: nil) as? [String: Any] {
                config = plist
                logger.info("üîß ‰ªéÊñá‰ª∂Âä†ËΩΩÈÖçÁΩÆÊàêÂäü")
            } else {
                logger.error("‚ùå Âä†ËΩΩÈÖçÁΩÆÊñá‰ª∂Â§±Ë¥•Ôºå‰ΩøÁî®ÈªòËÆ§ÈÖçÁΩÆ")
                config = getDefaultConfig()
                saveConfig()
            }
        } else {
            // Â¶ÇÊûúÈÖçÁΩÆÊñá‰ª∂‰∏çÂ≠òÂú®ÔºåÂàõÂª∫ÈªòËÆ§ÈÖçÁΩÆ
            logger.info("üîß ÈÖçÁΩÆÊñá‰ª∂‰∏çÂ≠òÂú®ÔºåÂàõÂª∫ÈªòËÆ§ÈÖçÁΩÆ")
            config = getDefaultConfig()
            saveConfig()
        }
    }
    
    /// Ëé∑ÂèñÈÖçÁΩÆ‰∏≠ÁöÑÂ≠óÁ¨¶‰∏≤ÂÄº
    /// - Parameter key: ÈÖçÁΩÆÈîÆ
    /// - Returns: Â≠óÁ¨¶‰∏≤ÂÄºÔºåÂ¶ÇÊûúÊâæ‰∏çÂà∞ÊàñÁ±ªÂûã‰∏çÂåπÈÖçÂàôËøîÂõûÁ©∫Â≠óÁ¨¶‰∏≤
    func string(forKey key: String) -> String {
        return config[key] as? String ?? ""
    }
    
    /// Ëé∑ÂèñÈÖçÁΩÆ‰∏≠ÁöÑÊï∞ÂÄº
    /// - Parameter key: ÈÖçÁΩÆÈîÆ
    /// - Returns: Êï∞ÂÄºÔºåÂ¶ÇÊûúÊâæ‰∏çÂà∞ÊàñÁ±ªÂûã‰∏çÂåπÈÖçÂàôËøîÂõû0
    func integer(forKey key: String) -> Int {
        return config[key] as? Int ?? 0
    }
    
    /// Ëé∑ÂèñÈÖçÁΩÆ‰∏≠ÁöÑÂ∏ÉÂ∞îÂÄº
    /// - Parameter key: ÈÖçÁΩÆÈîÆ
    /// - Returns: Â∏ÉÂ∞îÂÄºÔºåÂ¶ÇÊûúÊâæ‰∏çÂà∞ÊàñÁ±ªÂûã‰∏çÂåπÈÖçÂàôËøîÂõûfalse
    func boolean(forKey key: String) -> Bool {
        return config[key] as? Bool ?? false
    }
    
    /// Êõ¥Êñ∞ÈÖçÁΩÆÂÄº
    /// - Parameters:
    ///   - value: Êñ∞ÂÄº
    ///   - key: ÈÖçÁΩÆÈîÆ
    /// - Returns: ÊòØÂê¶Êõ¥Êñ∞ÊàêÂäü
    @discardableResult
    func update(value: Any, forKey key: String) -> Bool {
        config[key] = value
        
        // Â∞ùËØïÂ∞ÜÊõ¥Êñ∞ÂÜôÂÖ•ÈÖçÁΩÆÊñá‰ª∂
        guard let path = Bundle.main.path(forResource: "Config", ofType: "plist"),
              let config = NSMutableDictionary(contentsOfFile: path) else {
            logger.error("‚ùå Êó†Ê≥ïÊõ¥Êñ∞ÈÖçÁΩÆÊñá‰ª∂")
            return false
        }
        
        config[key] = value
        
        if config.write(toFile: path, atomically: true) {
            logger.info("‚úÖ ÈÖçÁΩÆÂ∑≤Êõ¥Êñ∞: \(key)")
            return true
        } else {
            logger.error("‚ùå Êó†Ê≥ï‰øùÂ≠òÈÖçÁΩÆÊõ¥Êñ∞: \(key)")
            return false
        }
    }
    
    // MARK: - ‰æøÊç∑ËÆøÈóÆÊñπÊ≥ï
    
    /// DeepSeek APIÂØÜÈí•
    var deepseekApiKey: String {
        return string(forKey: "DEEPSEEK_API_KEY")
    }
    
    /// AzureËØ≠Èü≥ÊúçÂä°ÂØÜÈí•
    var azureSpeechKey: String {
        return string(forKey: "AZURE_SPEECH_KEY")
    }
    
    /// AzureËØ≠Èü≥ÊúçÂä°Âå∫Âüü
    var azureSpeechRegion: String {
        return string(forKey: "AZURE_SPEECH_REGION")
    }
    
    /// Ëá™ÂÆö‰πâËØ≠Èü≥ID
    var azureCustomVoiceId: String? {
        let id = string(forKey: "AZURE_CUSTOM_VOICE_ID")
        return id.isEmpty ? nil : id
    }
    
    /// ËÆæÁΩÆËá™ÂÆö‰πâËØ≠Èü≥ID
    /// - Parameter voiceId: Êñ∞ÁöÑËØ≠Èü≥ID
    func setCustomVoiceId(_ voiceId: String) {
        update(value: voiceId, forKey: "AZURE_CUSTOM_VOICE_ID")
    }
    
    /// ÈªòËÆ§ËØ≠Èü≥Á±ªÂûã
    var defaultVoiceType: String {
        return string(forKey: "DEFAULT_VOICE_TYPE")
    }
    
    /// ÁºìÂ≠òËøáÊúüÂ§©Êï∞
    var cacheExpiryDays: Int {
        return integer(forKey: "CACHE_EXPIRY_DAYS")
    }
    
    /// ÈªòËÆ§ÊïÖ‰∫ãÈïøÂ∫¶
    var defaultStoryLength: String {
        return string(forKey: "DEFAULT_STORY_LENGTH")
    }
    
    /// ÊúÄÂ§ßÈáçËØïÊ¨°Êï∞
    var maxStoryRetries: Int {
        return integer(forKey: "MAX_STORY_RETRIES")
    }
    
    /// ÊòØÂê¶ÂêØÁî®ÂÜÖÂÆπÂÆâÂÖ®Ê£ÄÊü•
    var contentSafetyEnabled: Bool {
        return boolean(forKey: "CONTENT_SAFETY_ENABLED")
    }
    
    /// ÊòØÂê¶ÂÖÅËÆ∏Ëá™ÂÆö‰πâËØ≠Èü≥ËÆ≠ÁªÉ
    var allowCustomVoiceTraining: Bool {
        return boolean(forKey: "ALLOW_CUSTOM_VOICE_TRAINING")
    }
    
    /// ÊòØÂê¶ÂêØÁî®Ë∞ÉËØïÊó•Âøó
    var debugLoggingEnabled: Bool {
        return boolean(forKey: "DEBUG_LOGGING_ENABLED")
    }
    
    /// ÊòØÂê¶‰ΩøÁî®Êú¨Âú∞Â§áÁî®ÊñπÊ°à
    var useLocalFallback: Bool {
        return boolean(forKey: "USE_LOCAL_FALLBACK")
    }
    
    /// ÊòØÂê¶ÂêØÁî®CloudKitÂêåÊ≠•
    var cloudKitSyncEnabled: Bool {
        let enabled = getBool(forKey: "CLOUDKIT_SYNC_ENABLED", defaultValue: true)
        logger.info("üîç ËØªÂèñCloudKitÂêåÊ≠•ÈÖçÁΩÆ: \(enabled)")
        return enabled
    }
    
    /// ËÆæÁΩÆCloudKitÂêåÊ≠•Áä∂ÊÄÅ
    /// - Parameter enabled: ÊòØÂê¶ÂêØÁî®
    func setCloudKitSyncEnabled(_ enabled: Bool) {
        logger.info("üîß ËÆæÁΩÆCloudKitÂêåÊ≠•‰∏∫: \(enabled)")
        set(enabled, forKey: "CLOUDKIT_SYNC_ENABLED")
    }
    
    /// ÊòØÂê¶Âú®Wi-Fi‰∏ãËá™Âä®ÂêåÊ≠•
    var syncOnWifiOnly: Bool {
        return getBool(forKey: "SYNC_ON_WIFI_ONLY", defaultValue: true)
    }
    
    /// ÂêåÊ≠•È¢ëÁéáÔºàÂ∞èÊó∂Ôºâ
    var syncFrequencyHours: Int {
        return getInt(forKey: "SYNC_FREQUENCY_HOURS", defaultValue: 24)
    }
    
    /// ÊòØÂê¶Ëá™Âä®‰∏ãËΩΩÊñ∞ÊïÖ‰∫ã
    var autoDownloadNewStories: Bool {
        return getBool(forKey: "AUTO_DOWNLOAD_NEW_STORIES", defaultValue: true)
    }
    
    // MARK: - ÂÖ¨ÂÖ±ÊñπÊ≥ï
    
    /// Ëé∑ÂèñÂ≠óÁ¨¶‰∏≤ÈÖçÁΩÆ
    /// - Parameters:
    ///   - key: ÈÖçÁΩÆÈîÆ
    ///   - defaultValue: ÈªòËÆ§ÂÄº
    /// - Returns: ÈÖçÁΩÆÂÄº
    func getString(forKey key: String, defaultValue: String = "") -> String {
        return config[key] as? String ?? defaultValue
    }
    
    /// Ëé∑ÂèñÊï¥Êï∞ÈÖçÁΩÆ
    /// - Parameters:
    ///   - key: ÈÖçÁΩÆÈîÆ
    ///   - defaultValue: ÈªòËÆ§ÂÄº
    /// - Returns: ÈÖçÁΩÆÂÄº
    func getInt(forKey key: String, defaultValue: Int = 0) -> Int {
        return config[key] as? Int ?? defaultValue
    }
    
    /// Ëé∑ÂèñÂ∏ÉÂ∞îÈÖçÁΩÆ
    /// - Parameters:
    ///   - key: ÈÖçÁΩÆÈîÆ
    ///   - defaultValue: ÈªòËÆ§ÂÄº
    /// - Returns: ÈÖçÁΩÆÂÄº
    func getBool(forKey key: String, defaultValue: Bool = false) -> Bool {
        return config[key] as? Bool ?? defaultValue
    }
    
    /// ËÆæÁΩÆÈÖçÁΩÆÈ°π
    /// - Parameters:
    ///   - value: ÈÖçÁΩÆÂÄº
    ///   - key: ÈÖçÁΩÆÈîÆ
    func set(_ value: Any, forKey key: String) {
        config[key] = value
        saveConfig()
    }
    
    /// Âà†Èô§ÈÖçÁΩÆÈ°π
    /// - Parameter key: ÈÖçÁΩÆÈîÆ
    func removeValue(forKey key: String) {
        config.removeValue(forKey: key)
        saveConfig()
    }
    
    /// ÈáçÁΩÆ‰∏∫ÈªòËÆ§ÈÖçÁΩÆ
    func resetToDefault() {
        config = getDefaultConfig()
        saveConfig()
    }
    
    // MARK: - ÁßÅÊúâÊñπÊ≥ï
    
    /// Ëé∑ÂèñÈªòËÆ§ÈÖçÁΩÆ
    /// - Returns: ÈªòËÆ§ÈÖçÁΩÆÂ≠óÂÖ∏
    private func getDefaultConfig() -> [String: Any] {
        return [
            "DEEPSEEK_API_KEY": "",
            "AZURE_SPEECH_KEY": "",
            "AZURE_SPEECH_REGION": "eastasia",
            "AZURE_CUSTOM_VOICE_ID": "",
            "APP_VERSION": "1.0.0",
            "DEFAULT_VOICE_TYPE": "ËêçËêçÈòøÂß®",
            "DEFAULT_STORY_LENGTH": "‰∏≠ÁØá",
            "CACHE_EXPIRY_DAYS": 7,
            "MAX_STORY_RETRIES": 5,
            "CONTENT_SAFETY_ENABLED": true,
            "ALLOW_CUSTOM_VOICE_TRAINING": true,
            "DEBUG_LOGGING_ENABLED": true,
            "USE_LOCAL_FALLBACK": true,
            "CLOUDKIT_SYNC_ENABLED": true,
            "SYNC_ON_WIFI_ONLY": true,
            "SYNC_FREQUENCY_HOURS": 24,
            "AUTO_DOWNLOAD_NEW_STORIES": true
        ]
    }
    
    /// ‰øùÂ≠òÈÖçÁΩÆÂà∞Êñá‰ª∂
    private func saveConfig() {
        do {
            let plistData = try PropertyListSerialization.data(fromPropertyList: config, format: .xml, options: 0)
            try plistData.write(to: configURL)
            logger.info("‚úÖ ÈÖçÁΩÆÂ∑≤‰øùÂ≠òÂà∞Êñá‰ª∂")
        } catch {
            logger.error("‚ùå ‰øùÂ≠òÈÖçÁΩÆÂ§±Ë¥•: \(error.localizedDescription)")
        }
    }
} 